# Name of your application. Used to uniquely configure containers.
service: deal-notifier
retain_containers: 1
deploy_timeout: 120

# Name of the container image.
image: kalmai/rails-deal-notifier-rails

# Deploy to these servers.
servers:
  web:
    - dealnotifier
  job:
    hosts:
      - dealnotifier
    cmd: bin/jobs
      # job:
      #   hosts:
      #     - 76.181.33.98
      #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  # ssl: true
  # host: app.host.com
  # Proxy connects to your container on port 80 by default.
  app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: kalmai

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  context: . # TODO: remove this
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY
env:
  clear:
    RAILS_ENV: production
  secret:
    - KAMAL_REGISTRY_PASSWORD
    - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
ssh:
  user: rails
  keys: [ "~/.ssh/id.pem" ]
  keys_only: false


# Use a persistent storage volume.
#
volumes:
  - "storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     host: host
#     port: "127.0.0.1:5432:5432"
#     volumes:
#       - /var/lib/postgresql/data:/var/lib/postgresql/data
#     directories:
#       - data:/var/lib/postgresql/data
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
